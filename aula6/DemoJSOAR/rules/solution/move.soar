sp {solution*propose*move
   (state <s> ^name solution
              ^position <position>
              ^memory <memory>
              ^knapsack <knapsack>
              ^desired <desired>)
   (<position> ^X <creaturePositionX>)
   (<position> ^Y <creaturePositionY>)
   # find a jewel
   (<memory> ^ENTITY <entity>)
   (<entity> ^X <entityPositionX>)
   (<entity> ^Y <entityPositionY>)
   (<entity> ^NAME <entityName>)
   (<entity> ^TYPE JEWEL)
   (<entity> ^COLOR <color>)
   # move only if distance is greater than 30
   (<entity> ^distance { <distance> > 30 })
   # filter colors only that are missing in some leaflet
   (<desired> ^<color> <desiredQuantity>)
   (<knapsack> ^<color> { <quantity> < <desiredQuantity> })
-->
   (<s> ^operator <o> +)
   (<o> ^name move)
   (<o> ^parameter <p>)
   (<p> ^NAME <entityName>)
   (write (crlf) | propose move: name = | <entityName> | distance = | <distance> ||)
}
   
sp {solution*apply*move
   (state <s> ^operator <o>
#              ^io.input-link.CREATURE <creature>
              ^position <position>
              ^memory <memory>)
   (<o> ^name move)
   (<o> ^parameter.NAME <entityName>)
   (<memory> ^ENTITY <entity>)
   (<entity> ^NAME <entityName>)
   (<entity> ^X <x>)
   (<entity> ^Y <y>)
   (<entity> ^distance <distance>)
-->
   (<entity> ^distance <distance> -)
   (<entity> ^distance 0)
   (<position> ^X <x>)
   (<position> ^Y <y>)
   #   (<s> ^actions <actions>)
   #   (<actions> ^MOVE <command>)
   #   (<command> ^Vel 1)
   #   (<command> ^VelR 1)
   #   (<command> ^VelL 1)
   #   (<command> ^X <x>)
   #   (<command> ^Y <y>)
   (write (crlf) | apply move: name = | <entityName> | distance = | <distance> ||)
}
