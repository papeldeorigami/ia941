# this operator will always be proposed where there is something new in the input,
# independent of the current state, as long as it is initialized
sp {propose*see
   (state <s> ^initialized true
              ^io.input-link <input>
              ^actions <actions>)
   (<input> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^NAME <name>)
  -(<memory> ^ENTITY.NAME <name>)
   # if not memorizing something already
   (<actions> -^MEMORIZE)
-->
   (<s> ^operator <op> + =)
   (<op> ^name see)
   (write (crlf) | Propose see: name=| <name> ||)
}

sp {apply*see*memorize
   (state <s> ^operator <op>
              ^io.input-link <input>
              ^actions <actions>)
   (<input> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<op> ^name see)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^NAME <name>)
  -(<memory> ^ENTITY.NAME <name>)
   # if not memorizing something already
   (<actions> -^MEMORIZE)
-->
   # prepare the output action
   (<actions> ^MEMORIZE.Name <name>)
   (write (crlf) | apply see*memorize: name=| <name> ||)
}