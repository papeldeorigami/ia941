sp {propose*get
   (state <s> ^name solution
              ^desired <desired>
              ^memory <memory>
              ^actions <actions>
              ^io.input-link.CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>
               ^KNAPSACK <knapsack>)
   # find a jewel
   (<entity> ^NAME <entityName>
             ^TYPE JEWEL
             ^COLOR <color>
             # get only if close to the entity
             ^DISTANCE { <DISTANCE> < 60 })
   # get only if already seen
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <entityName>
                  -^collected) # check if not collected before
   # filter colors only that are missing in some leaflet
   (<desired> ^<color> <desiredQuantity>)
   (<knapsack> ^<color> { <quantity> < <desiredQuantity> })
   # if not getting something already
  -(<actions> ^GET)
-->
   (<s> ^operator <o> + =)
   (<o> ^name get
        ^parameter.NAME <entityName>)
   (write (crlf) | propose get: name = | <entityName> | distance = | <DISTANCE> ||)
}

sp {solution*apply*get
   (state <s> ^operator <o>
              ^memory <memory>
              ^desired <desired>
              ^actions <actions>
              ^v-knapsack <v-knapsack>
              ^v-collected-names <v-collected-names>
              ^io.input-link.CREATURE <creature>)
   # read the jewel name from parameters
   (<o> ^name get
        ^parameter <p>)
   (<p> ^NAME <entityName>)
   # lookup the entity in the visual sensor
   (<creature> ^SENSOR.VISUAL <visual>
               ^KNAPSACK <knapsack>)
   (<visual> ^ENTITY <visualEntity>)
   (<visualEntity> ^NAME <entityName>)
   # lookup the entity in the memory
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity>
             ^NAME <entityName>
             ^COLOR <color>
            -^collected)
   # lookup the color status in the knapsack and in the desired state
   (<knapsack> ^<color> <quantity>
               ^Red <kred>
               ^Green <kgreen>
               ^Blue <kblue>
               ^Yellow <kyellow>
               ^Magenta <kmagenta>
               ^White <kwhite>)
   (<desired> ^<color> <dquantity>
              ^Red <dred>
              ^Green <dgreen>
              ^Blue <dblue>
              ^Yellow <dyellow>
              ^Magenta <dmagenta>
              ^White <dwhite>)
-->
   # remove element from the input (temporary)
   (<visual> ^ENTITY <visualEntity> -)
   # mark element as collected in memory
   (<memoryEntity> ^collected true)
   # increment the number of jewels of the entity's color in the knapsack
   (<knapsack> ^<color> <quantity> -
               ^<color> (+ <quantity> 1))
   # rewrite the v-knapsack to ensure consistance
   (<v-knapsack> ^<color> <quantity> -
                 ^<color> (+ <quantity> 1))
   # mark the item also as collected in the virtual memory
   (<v-collected-names> ^NAME <entityName>)
   # prepare the output action
   (<actions> ^GET.Name <entityName>)
   (write (crlf) | Get: name=| <entityName> | color=| <color> ||)
}
