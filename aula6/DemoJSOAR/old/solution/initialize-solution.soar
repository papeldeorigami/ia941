sp {propose*initialize-solution
   (state <s> ^superstate nil
              ^io.input-link.CREATURE <creature>
             -^initialized true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name initialize-solution)
}

sp {apply*initialize-solution
   (state <s> ^operator.name initialize-solution
              ^io.input-link.CREATURE <creature>)
   (<creature> ^POSITION <p>
               ^LEAFLETS <leaflets>
               ^PARAMETERS.TIMESTAMP <timestamp>)
   (<leaflets> ^LEAFLET <l1> { <> <l1> <l2> })
   (<leaflets> ^LEAFLET <l2> { <> <l2> <l3> })
   (<leaflets> ^LEAFLET <l3> { <> <l1> <l3> })
   (<l1> ^ORDER <ord1>
         ^Red <Red1>
         ^Green <Green1>
         ^Blue <Blue1>
         ^Yellow <Yellow1>
         ^Magenta <Magenta1>
         ^White <White1>)
   (<l2> ^ORDER { <ord2> < <ord1> }
         ^Red <Red2>
         ^Green <Green2>
         ^Blue <Blue2>
         ^Yellow <Yellow2>
         ^Magenta <Magenta2>
         ^White <White2>)
   (<l3> ^ORDER { <ord3> < <ord2> }
         ^Red <Red3>
         ^Green <Green3>
         ^Blue <Blue3>
         ^Yellow <Yellow3>
         ^Magenta <Magenta3>
         ^White <White3>)
-->
   (<s> ^name plan
        # flag to control whether these attributes have been initialized
        ^initialized true        
        # these attributes are available both for deliberation and reactive actions
        ^desired <desired>                 # jewels required grouped by color
        ^timestamp <timestamp>             # last timestamp read from the creature
        ^delivery-spot <delivery-spot>     # always (0,0)
        ^actions <actions>                 # holds the actions to be output
        ^memory <memory>)                  # a persistant memory of the entities that have been seen
   (<delivery-spot> ^X 0
                    ^Y 0)
   (<desired>
        ^better lower # success will be the lowest possible value for the numeric-value (traveledDistance)
        ^Red (+ <Red1> <Red2> <Red3>)
        ^Green (+ <Green1> <Green2> <Green3>)
        ^Blue (+ <Blue1> <Blue2> <Blue3>)
        ^Yellow (+ <Yellow1> <Yellow2> <Yellow3>)
        ^Magenta (+ <Magenta1> <Magenta2> <Magenta3>)
        ^White (+ <White1> <White2> <White3>))
   (write (crlf) | Initial State |)
   (write (crlf) | Leaflets require the following jewels: |)
   (write (crlf) | Red=(| <Red1> |, | <Red2> |, | <Red3> |)|)
   (write (crlf) | Green=(| <Green1> |, | <Green2> |, | <Green3> |)|)
   (write (crlf) | Blue=(| <Blue1> |, | <Blue2> |, | <Blue3> |)|)
   (write (crlf) | Yellow=(| <Yellow1> |, | <Yellow2> |, | <Yellow3> |)|)
   (write (crlf) | Magenta=(| <Magenta1> |, | <Magenta2> |, | <Magenta3> |)|)
   (write (crlf) | White=(| <White1> |, | <White2> |, | <White3> |)|)
}
